name: Build and Test Muduo

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ \
            cmake \
            make \
            vim \
            wget \
            git \
            protobuf-compiler libunwind-dev libprotoc-dev \
            libgoogle-perftools-dev \
            libc-ares-dev libcurl4-openssl-dev \
            libgtest-dev \
            libgmock-dev \
            libboost-all-dev        

      - name: Find boost library path
        run: |
          BOOST_INCLUDE_PATH=$(find /usr/include -name boost | head -n 1)
          BOOST_LIB_PATH=$(find /usr/lib -name libboost_system.so | xargs dirname | head -n 1)
          echo "BOOST_INCLUDE_PATH=$BOOST_INCLUDE_PATH" >> $GITHUB_ENV
          echo "BOOST_LIB_PATH=$BOOST_LIB_PATH" >> $GITHUB_ENV

      - name: Find gtest library path
        run: |
          GTEST_LIB_PATH=$(find /usr/lib -name libgtest.a)
          echo "GTEST_LIB_PATH=$GTEST_LIB_PATH" >> $GITHUB_ENV

      - name: Find gmock library path
        run: |
          GMOCK_LIB_PATH=$(find /usr/lib -name libgmock.a)
          GMOCK_MAIN_LIB_PATH=$(find /usr/lib -name libgmock_main.a)
          echo "GMOCK_LIB_PATH=$GMOCK_LIB_PATH" >> $GITHUB_ENV
          echo "GMOCK_MAIN_LIB_PATH=$GMOCK_MAIN_LIB_PATH" >> $GITHUB_ENV

      # - name: Add and initialize submodules
      #   run: |
      #     echo "Current Dir " pwd
      #     git submodule add https://github.com/google/googletest.git submodules/googletest
      #     git submodule add https://github.com/boostorg/boost.git submodules/boost
      #     git submodule update --init --recursive

      # - name: Check submodule download
      #   run: |
      #     # Check googletest
      #     if [ ! -d "submodules/googletest" ] || [ -z "$(ls -A submodules/googletest)" ]; then
      #       echo "Error: googletest submodule not downloaded correctly."
      #       exit 1
      #     else
      #       echo "googletest submodule downloaded successfully."
      #     fi

      #     # Check boost
      #     if [ ! -d "submodules/boost" ] || [ -z "$(ls -A submodules/boost)" ]; then
      #       echo "Error: boost submodule not downloaded correctly."
      #       exit 1
      #     else
      #       echo "boost submodule downloaded successfully."
      #     fi

      # - name: Build And Install Boost 
      #   run: |
      #     cd submodules/boost
      #     ./bootstrap.sh
      #     ./b2 install --prefix=../../submodules/boost_installed
      #     cd ../..    

      # - name: Build And Install GTest 
      #   run: |
      #     mkdir -p submodules/googletest/build
      #     cd submodules/googletest/build
      #     cmake -DCMAKE_INSTALL_PREFIX=../../../submodules/gtest_installed ..
      #     make
      #     make install 
      #     cd ../../..
      
      # - name: Check Boost Installed
      #   run: |
      #     if [ ! -d "submodules/boost_installed" ] || [ -z "$(ls -A submodules/boost_installed)" ]; then
      #       echo "Error: Boost not installed correctly."
      #       exit 1
      #     else
      #       ls submodules/boost_installed
      #       echo "Boost installed successfully."
      #     fi    
          
      # - name: Check GTest Installed
      #   run: |
      #     if [ ! -d "submodules/gtest_installed" ] || [ -z "$(ls -A submodules/gtest_installed)" ]; then
      #       echo "Error: GTest not installed correctly."
      #       exit 1
      #     else
      #       ls submodules/gtest_installed
      #       echo "GTest installed successfully."
      #     fi    

      # - name: Compile with build.sh
      #   run: |
      #     cd m1_workspace
      #     chmod +x build.sh
      #     ./build.sh build

      # - name: Run tests with build.sh
      #   run: |
      #     cd m1_workspace
      #     chmod +x build.sh
      #     ./build.sh run          

      
